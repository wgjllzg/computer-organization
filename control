module p1 (
    input [6:0] Instruction6_0,
    output reg Branch,
    output reg MemRead,
    output reg MemtoReg,
    output reg ALUOp,
    output reg MemWrite,
    output reg ALUSrc,
    output reg RegWrite,
);

always @* begin
    case(Instruction6_0)
        7'b1100011: Branch = 1'b1; 
                    MemRead = 1'b0; 
                    MemtoReg = 1'b0; 
                    ALUOp = 2'b01; 
                    MemWrite = 1'b0; 
                    ALUSrc = 1'b0; 
                    RegWrite = 1'b0; //B  bne
        7'b0110011: Branch = 1'b0; 
                    MemRead = 1'b0; 
                    MemtoReg = 1'b0; 
                    ALUOp = 2'b10; 
                    MemWrite = 1'b0; 
                    ALUSrc = 1'b0; 
                    RegWrite = 1'b1; //R  add
        7'b0010011: Branch = 1'b0; 
                    MemRead = 1'b1; 
                    MemtoReg = 1'b1; 
                    ALUOp = 2'b00; 
                    MemWrite = 1'b0; 
                    ALUSrc = 1'b1; 
                    RegWrite = 1'b1; //I   lw  addi
        7'b0100011: Branch = 1'b0; 
                    MemRead = 1'b0; 
                    MemtoReg = 1'b1; 
                    ALUOp = 2'b00; 
                    MemWrite = 1'b1; 
                    ALUSrc = 1'b1; 
                    RegWrite = 1'b0; //S   sw
        7'b0110111: Branch = 1'b0; 
                    MemRead = 1'b0; 
                    MemtoReg = 1'b0; 
                    ALUOp = 2'b00; 
                    MemWrite = 1'b0; 
                    ALUSrc = 1'b0; 
                    RegWrite = 1'b1; //U   lui
        7'b1101111: Branch = 1'b1; 
                    MemRead = 1'b0; 
                    MemtoReg = 1'b0; 
                    ALUOp = 2'b00; 
                    MemWrite = 1'b0; 
                    ALUSrc = 1'b0; 
                    RegWrite = 1'b1; //J   jal
        default:    Branch = 1'b1; 
                    MemRead = 1'b0; 
                    MemtoReg = 1'b0; 
                    ALUOp = 2'b00; 
                    MemWrite = 1'b0; 
                    ALUSrc = 1'b0; 
                    RegWrite = 1'b1; //J   jal
    endcase
end

endmodule
